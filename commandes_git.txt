Les principales commandes de Git

Dépôt local: notre machine équipée de Git
Dépôt distant ( dans notre cas): GitHub

1- Initialisation de Git:

$ git config --global user.name "<user.name>"
$ git config --global user.email "<email>"

Vérifier des paramètres de Git:
$ git config --list

Configuration de  la couleur des différentes branches:
$ git config --global color.diff auto
$ git config --global color.status auto
$ git config --global color.branch auto

Configuration de l'éditeur (par défaut c'est vim):
$ git config --global core.editor <editeur>
$ git config --global merge.tool <outil de merge>  (par defaut vimdiff)

Création d'un dépot local, 2 possiblités:
créer notre propre dépôt local
cloner un depôt distant

Nous allons utilisé la première optionet nous allons créer un répertoire qui va contenir notre projet.

$ mkdir <répertoire de travail>
$ cd <répertoire de travail>
$ git init

2- Récupération ou création d'un projet distant sur GitHub:

2-1 Récupération d'un projet distant:

Il faut aller sur votre compte github, selectionner le projet que vous voulez cloner puis cliquer sur code.
A ce moment, vous allez voir l'url de votre projet en https, vous copier cette url puis vous tapez la commande suivante dans votre répertoire git:

On pointe vers le dépôt distant:
$git remote add <nom d'appel du dépôt> <url du projet> 

Clonage du projet:
$git clone <url du dépôt distant>

2-2 Création d'un projet:

Il faut aller sur le compte github, et cliquer sur le + dans l'angle droit de la page d'accueil.
L'onglet new repository apparait, cliquer dessus:
Choisissez un nom pour votre projet,restez en public
Initialisez votre projet avec deux fichiers README et .gitignore
Cliquez sur Create repository

Le fichier .gitignore permet d'exclure certains type de fichier du dépôt en effet les fichiers générer lors de la compilation ou bien les fichiers produit lors des tests de l'application ne doivent pas être présents dans le dépôt.




3- Premières commandes:

Identification des branches d'un dépôt git:
$git branch

Création d'une nouvelle branche:
$git branch <nom de la branche>

Déplacement sur une autre branche:
$git checkout <nom de la branche existante>

Git permet d'enregistrer les modifications effectuées au cours du temps de votre travail.

Nous allons tout d'abord créér un fichier que nous allons modifier par la suite:

On va d'abord se placer sur la branche qui nous intéresse:
$git checkout <branche qui nous intéresse>

Création d'un fichier :
$touch <nom du fichier>

Ajout du fichier dans l'index de notre dépôt local:
$git add <nom du fichier>

Modification du fichier avec un éditeur de texte, vi par exemple. Puis enregistrons les modifications avec la commande suivante:
$git commit -am "Message indiquant la modification que l'on a faite"

Après avoir commité la modification, il faut maintenant la pousser sur le dépôt distant en tapant la commande suivante:
$git push

Pour récupérer les modifications qui ont été effectuées par un autre collègue sur la même branche et qui ont été poussées par celui-ci il faut taper la commande:
$git pull

4- Correction des erreurs sur le dépôt local:
 
Dans le dépôt local se trouve  zones majeures :
- le répertoire de travail
- l’index ou stage (référencement des fichiers modifiés)
- le dépôt local git (ensemble des commits représentant une image du projet à un temps t)

Pour accéder à l'ensemble des actions référencées dans le repository sous la forme de commits identifiés par un sha (code), il faut taper la commande suivante:
$git log ou $git reflog (informations basiques)

4-1 Création d'une branche par erreur:

4-1-1 sans modification à l'intérieur:

Tout d'abord création d'une branche de test:
$git branch brancheTest

Pour la supprimer:
$git branch -d brancheTest

4-1-2 Avec modifications non commitées:

Avec la commande suivante toutes les modifications non commitées seront supprimées:
$git branch -D brancheTest 

4-2 Modifications de la branche principale:

4-2-1 Sans commit:

Si les modifications n'ont pas été commitées alors nous pouvons faire une remise, c'est à dire mettre les modifications de côté afin de créer une nouvelle branche afin de mettre ces modifications à l'intérieur.
$git stash

En faisant un $git status nous pouvons voir que notre branche est à nouveau propre, nous créeons alors notre nouvelle branche.
$git branch brancheCommit
$git checkout brancheCommit

On recupère enfin notre seule remise ou bien la dernière remise qui a été faite appartenant à une liste de remises.
$git stash apply

Si plusieurs remises ont été effectuées, nous pouvons obtenir la liste en faisant :
$git stash list

Pour choisir la remise qui nous intéresse:
$git stash apply stash@{1}

4-2-2 Avec commit:

Récupérons l'identifiant du commit qui a été effectué:
$git log

On vérifie que l'on est bien sur la branche master puis l'on supprime le dernier commit:
$git reset --hard HEAD^

On crée notre nouvelle branche:
$git branch brancheCommit
$git checkout brancheCommit

On va appliquer maintenant le commit que nous avons supprimer de la branche master sur la branche brancheCommit en utilisant le sha de ce même commit:
$git reset --hard < 8 premiers caractères du sha >

4-3 Modification du message du dernier commit:

$git commit --amend -m "Nouveau message"

4-4 Oublie d'un fichier dans le dernier commit:

Nous allons ajouter le fichier à l'index puis ajouter ce fichier au dernier commit:
$git add < fichier oublié >
$git commit --amend --no-edit

5- Correction des erreurs sur le dépot distant:

5-1 Erreur de commit pushé:

Pour supprimer un commit dans le dépot local et dans le dépot distant:
$git revert HEAD^

Cette commande supprime le dernier commit en créant un commit d'annulation.
 
Cette commande peut écraser les dernières modifications d'un fichier dans un répertoire de travail.

5-2 Problème d'accès à distance:

5-2-1 Génération de clés SSH :

ssh -keygen -t rsa -b 4096 -C "< adresse mail >"

Deux clés ont été générées, elles se trouvent dans le répertoire .ssh de votre home dans votre terminal.

5-2-2 Configuration de github:

Il faut copier la clé publique id_rsa.pub puis la coller dans un ancadré en allant dans votre profil en haut à droite puis en cliquant sur settings puis sur SSH et GPG keys et enfin sur New SSH key.

Sur votre dépôt local il faut taper les commandes suivante pour annuler l'authentification par mot de passe :
Identification de la méthode d'authentification:
$git remote -v 
On obtient ceci, si l'authentification se fait par clés SSH 

origin	git@github.com:< login >/<nom du projet>.git (fetch)
origin	git@github.com:< login >/<nom du projet>.git (push)

Sinon par authentification par mot de passe :

origin	<url du projet>.git (fetch)
origin	<url du projet>.git (push)

Changement du mode d'authentification:
$git remote set-url origin 	git@github.com:< login >/<nom du projet>.git

6- La commande git reset:

6-1 Trois niveaux de réinitialisation:

Cette commande peut être appelée avec 3 niveaux de réinitialisation, elles permet de supprimer des modifications.

Avec --hard comme paramètre:

Tout est effacé, elle permet de revenir sur n'importe quel commit et effacer toutes les modifications qui ont été réalisées après.

On revient au commit indiqué par commit cible:
$git reset < commit cible > --hard 

Avec --mixed comme paramètre:

On peut revenir sur n'importe quel commit indiqué mais nous gardons l'historique.
Il va garder un HEAD détaché et ne pas supprimer les modifications en cours.
Si le commit n'est pas indiqué la commande va exécuter par défaut :
$git reset --mixed HEAD~ ou < sha d'un commit >

Dans le cas o dse fichiers ont été indexés mais pas commités, cette commande permet une déindexation.

Avec --soft comme paramètre:

Ce paramètre permet de se placer sur un commit spécifique sans rien modifier.
$git reset --soft < sha d'un commit >

6-2 Conflits lors d'un merge:

Git va nous avertir lorsqu'il rencontre des conflits et va demander de résoudre ces conflits.
Les conflits peuvent être résolus avec un éditeur de texte. A la fin de cette résolution il faudra faire un git commit avec un message proposé que l'on peut évidemment modifier.

6-3 Ajout d'un mauvais fichier dans un commit:

Nous allons maintenant essayer de retrouver l'état de notre travail tel qu'il était dans le commit précédent mis pas en supprimant le dernier commit mais en créant un nouveau commit correspondant à l'état précédant avec cette commande:
$git revert HEAD 

7- Correction de commits raté:

7-1 Journalisation:

Git permet d'enregistrer un historique de toutes les actions que l'on a réalisé sur le projet.
Nous pouvons retrouver l'historique des commits en faisant:
$git log

Les info de git log sont:
- la date du commit
- l'auteur
- le message du commit 
- le sha

$git reflog

Les infos de git reflog sont plus complètes puisque toutes les actions sont référencées:
- modification de message d commit
- merge
- reset
- checkout 
...

On peut très bien pointer sur un ancien commit sans rien toucher à l'historique en faisant :
$git checkout < sha du commit >

7-2 Qui a fait des modif dans ce fichier:

Nous pouvons déterminer ligne par ligne qui a modifié un fichier et quand en tapant:
$git blame < nom du fichier >

7-3 Choisir des commits et les déplacer dans une autre branche:

Cette va dupliquer des commits.

Si nous avons fait plusieurs commits dans une branche et que nous ne voulons que certaines modifications qui correspondent à certains commits dans la branche master alors nous utiliserons cette commnande:  
$git cherry-pick < sha du 1er commit > < sha du 3ème commit >

8- Strusture de fichier de git:

Il existe trois types d'objets:

- tree= forme de répertoire qui référence des tree et des blobs
- commit = qui pointe vers un arbre spécifique et qui fige son état à un instant donné grace au sha
- blob = Binary Large Objet, c'est un fichier pour chaque sha il existe une version du fichier  qui a été ajouté à l'index


8-1 La fusion sous git:

Pour réaliser une fusion de branche dans git, il faut toujours vérifier sur quelle branche nous nous trouvons, une fusion de branche se fait avec la commande git merge < nom de la branche que l'on veut fusionner avec la branche sur laquelle nous nous trouvons>

La fusion va créer un nouveau commit sur la branche dans laquelle nous avons fusionné l'autre branche.
Si des modifications ont été faites sur le même fichier mais dans des branches différentes la fusion va entraîner des conflits qui devront être résolus manuellement.
 
8-2 Récuperation des modifications se trouvant sur le dépôt distant et envoie des modifications sur le dépôt distant:

Pour récuperer les modifications se trouvant sur le dépôt distant dans le dépôt local nous allons taper la commande suivante qui est une concaténation de deux commandes:
$git merge + $git fetch = $git pull

Lors de la'exécution de $git pull un commit de fusion va être créé.

Pour envoyer les modifications que nous avons fait sur le dépôt local vers le dépôt distant nous allons exécuter la commande suivante:
$git push
Nous pouvons aussi pousser seulement les modifications d'une seule branche si plusieurs branches sont modifiées sur notre dépôt local mais que nous ne voulons publier qu'une seule branche:
$git push < branche >

8-3 La commande git fetch:

Cette commande permet de récupérer les modifications sur le depôt distant mais ne les fusionne pas avec votre travail en cours. Ces modifications vont être isolées en tant que contenu local existant. Pour les fusionner il faudra faire un git merge. Ces différentes commandes seront exécutées sur la branche locale.

$git fetch
$git merge

9- Le rebasage:

Le rebasage permet de transférer des changements dans une branche comme le git merge mais de façon un peu différente.
La commande $git rebase va transférer les commits d'une branche dans une autre, les commits des deux branches vont alors être ensembles.
Le merge d'une branche dans une autre va contrairement à la commande précédente créer un commit de fusion mais ne va pas intégrer l'ensemble des commits de l'ancienne branche dans la branche de fusion.

9-1 Le rebasage interactif  et le nettoyage de l'historique :

Cette fonctionnalité permet de supprimer ou de modifier des commits, lorsque la commande : $git rebase -i est lancée un éditeur s'ouvre et vous propose plusieurs actions.
Cette commande permet de nettoyer et de maintenir la cohérence de l'historique d'un projet.

$git rebase -i

9-1-1 Modifications de l'ordre des commits:

Pour modifier l'ordre des commits nous allons utiliser la commande git rebase -i encore mais en rajoutant une option.

Si nous voulons modifier l'ordre des 3 derniers commits:

$git rebase -i HEAD~3

Un editeur s'ouvre et propose des options, il faut choisir l'option pick pour modifier l'ordre et l'option drop si vou voulez supprimmer un des commits.Pour l'ordre il suffit de modifier l'ordre d'apparition des commits.

9-1-2 Modifications d'un message de commit:

Pour modifier le message d'un commit il suffit de placer edit devant le commit dans l'editeur qui s'ouvre puis lors de la fermeture de l'éditeur un texte indique les commandes qu'il faudrat exécuter pour effectuer cette modification.

$git rebase -i HEAD^
edit <sha du commit>
$git commit --amend
$git rebase --continue

9-1-3 Suppression d'un commit ou fusion de plusieurs commit:

$git rebase -i HEAD~2
drop <sha du commit>
On enregistre et sort de l'éditeur

$git rebase HEAD~3
pick <numero du commit3>
sqhash <numero du commit2>
sqhash <numero du commit1>

Les commits 1 et 2 vont être fusionnés dans le commit 3.

9-2 Suppression d'une branche:

Une branche non utilisé peut-être supprimmée avec la commande:
$git branch -d <nom de la branche>

9-3 Recherche d'un bug avec git bisect:

L'utilisation de cette commande nécessite de faire des commits régulièrement et les plus petits possibles.

Cette commande s'utilise de la façon suivante:

$git bisect start <sha d'un commit ou le bug est présent> <sha d'un commit ou il n'y a pas de bug>

git va se déplacer d'un commit à l'autre et il faudra pour chacun d'eux indiquer si le commit est good ou bad. Une fois fini git vous indiquera à quel niveau la modification doit être faite.


10-Intégration d'un dépôt git dans un dépôts git:

10-1 Les sous modules:

On fait une intégration d'un projet dans un autres lorsque l'un utilise l'autre et qu'il nécéssite des modifications réalisées en parallèles
Le but d'imbriquer deux dépôts ensemble est de suivre l'historique des modifications des deux projets.
On parle de sous-modules git.

Pour intégrer un un dépôt git dans un autre dépôt il faut faire:

$git submodule add <url du nouveau projet>

Un nouveau fichier de configuration a été rajouté .gitmodules .     

10-2 Les sous arborescences:

Le fait de créer une sous arborescence dans un dépôt git va permettre de créer un historique d'un répertoire que l'on pourra utiliser dans un autre projet tout en gardant l'historique des commits.
La commande est la suivante:

$git substree push -P <nom du répertoire> git@mon-serveur-git:group/projet.git master

11- GitFlow:

Il faut tout d'abord installer git-flow puis l'initialiser:
$apt-get install git-flow
$git flow init

git flow va définir deux branches dans lesquelles il ne faut pas développer:
	- la branche master qui correspond à l'environnement de production dans laquelle se trouvent toutes les versions officielles d'un projet
	- la branche develop qui correspond à une copie de la branche master dans laquelle les tests vont se dérouler
	
Il existe 3 types de branches avec git flow:
	- les features sur lesquelles nous developpons de nouvelles fonctionalités, une fois terminée cette branche sera mergée sur la branche develop
	- les hotfix sont crées à partir de master, elles permettent de corriger des bugs de production, une fois la correction effectuée la branche hotfix devra être mergée dans la branche develop et dans la branche master
	- les releases correspondent à une version du projet finis, elle sont crées à partir de la branche develop une fois fois que toutes les fonctionnalitées ont été developpées, elles permettent de tester la version du projet en question, lorsque la branche release est terminée, elle doit être mergée dans develop puis dans master.

Il faut se placer sur la branche develop:
$git flow feature start <nom de la branche feature> 

11- D'autres outils:


